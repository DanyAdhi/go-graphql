package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"

	"github.com/danyadhi/go-graphql/graph/model"
	"github.com/danyadhi/go-graphql/internal/pets"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreatePet is the resolver for the createPet field.
func (r *mutationResolver) CreatePet(ctx context.Context, input model.NewPet) (*model.Pet, error) {
	data := pets.NewPet{
		Name:    input.Name,
		Type:    "",
		OwnerId: int(input.OwnerID),
	}

	if input.Type != nil {
		data.Type = *input.Type
	}

	id, err := r.PetsService.Create(data)
	if err != nil {
		return nil, err
	}

	result := &model.Pet{
		ID:      int32(id),
		Name:    data.Name,
		Type:    data.Type,
		OwnerID: int32(data.OwnerId),
	}

	return result, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Pets is the resolver for the pets field.
func (r *queryResolver) Pets(ctx context.Context) ([]*model.Pet, error) {
	pets, err := r.PetsService.GetAll()
	if err != nil {
		return nil, err
	}

	var result []*model.Pet
	for _, pet := range *pets {

		result = append(result, &model.Pet{
			ID:        pet.ID,
			Name:      pet.Name,
			Type:      pet.Type,
			OwnerID:   int32(pet.OwnerId),
			OwnerName: pet.OwnerName,
		})
	}

	return result, nil
}

// Pet is the resolver for the pet field.
func (r *queryResolver) Pet(ctx context.Context, id int32) (*model.Pet, error) {
	pet, err := r.PetsService.GetOne(id)
	if err != nil {
		return nil, err
	}

	result := &model.Pet{
		ID:        pet.ID,
		Name:      pet.Name,
		Type:      pet.Type,
		OwnerID:   int32(pet.OwnerId),
		OwnerName: pet.OwnerName,
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
