package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"errors"
	"fmt"

	"github.com/danyadhi/go-graphql/graph/model"
	"github.com/danyadhi/go-graphql/internal/pets"
	"github.com/danyadhi/go-graphql/utils"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreatePet is the resolver for the createPet field.
func (r *mutationResolver) CreatePet(ctx context.Context, input model.NewPet) (*model.Pet, error) {
	data := pets.NewPet{
		Name:    input.Name,
		Type:    "",
		OwnerId: int(input.OwnerID),
	}

	if input.Type != nil {
		data.Type = *input.Type
	}

	id, err := r.PetsService.Create(data)
	if err != nil {
		return nil, err
	}

	result := &model.Pet{
		ID:      int32(id),
		Name:    data.Name,
		Type:    data.Type,
		OwnerID: int32(data.OwnerId),
	}

	return result, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Pets is the resolver for the pets field.
func (r *queryResolver) Pets(ctx context.Context) ([]*model.Pet, error) {
	pets, err := r.PetsService.GetAll()
	if err != nil {
		return nil, err
	}

	var result []*model.Pet
	for _, pet := range *pets {

		result = append(result, &model.Pet{
			ID:        pet.ID,
			Name:      pet.Name,
			Type:      pet.Type,
			OwnerID:   int32(pet.OwnerId),
			OwnerName: pet.OwnerName,
		})
	}

	return result, nil
}

// Pet is the resolver for the pet field.
func (r *queryResolver) Pet(ctx context.Context, id int32) (*model.Pet, error) {
	pet, err := r.PetsService.GetOne(id)
	if err != nil {
		return nil, err
	}

	result := &model.Pet{
		ID:        pet.ID,
		Name:      pet.Name,
		Type:      pet.Type,
		OwnerID:   int32(pet.OwnerId),
		OwnerName: pet.OwnerName,
	}

	return result, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Orders, error) {
	requestFields := utils.GetRequestedFields(ctx)
	if len(requestFields) == 0 {
		return nil, errors.New(`no fields request`)
	}

	orders, err := r.OrdersService.GetAll(requestFields)
	if err != nil {
		return nil, err
	}

	var result []*model.Orders

	for _, order := range *orders {

		result = append(result, &model.Orders{
			PurchaseRequestNumber:     order.PurchaseRequestNumber.String,
			PurchaseOrderNumber:       order.PurchaseOrderNumber.String,
			SalesOrderNumber:          order.SalesOrderNumber.String,
			BastNumber:                order.BastNumber.String,
			InvoiceNumber:             order.InvoiceNumber.String,
			StatusID:                  order.StatusID,
			ProjectType:               order.ProjectType,
			InvoiceDate:               order.InvoiceDate,
			DueAt:                     order.DueAt,
			ReceivedAtLatest:          order.ReceivedAtLatest,
			IsPreOrder:                order.IsPreOrder,
			IsRfq:                     order.IsRfq,
			IsInvoiceFinancing:        order.IsInvoiceFinancing,
			IsTermin:                  order.IsTermin,
			ShippingType:              order.ShippingType,
			ShippingAgency:            order.ShippingAgency.String,
			ShippingMethod:            order.ShippingMethod.String,
			ShippingAwb:               order.ShippingAwb.String,
			ShippingCost:              order.ShippingCost,
			ShippingDiscount:          order.ShippingDiscount,
			PaymentType:               order.PaymentType,
			PaymentID:                 order.PaymentID.String,
			PaymentCode:               order.PaymentCode.String,
			PaymentBankName:           order.PaymentBankName.String,
			PaymentGateway:            order.PaymentGateway.String,
			PaymentMethodFee:          order.PaymentMethodFee,
			PaymentMethodPpnAmount:    order.PaymentMethodPpnAmount,
			PaymentMethodPphAmount:    order.PaymentMethodPphAmount,
			PaymentAccountNumber:      order.PaymentAccountNumber.String,
			PaymentURL:                order.PaymentURL.String,
			PaymentExpiredAt:          order.PaymentExpiredAt,
			TotalAmount:               order.TotalAmount,
			TotalGoodsAmount:          order.TotalGoodsAmount,
			TotalServicesAmount:       order.TotalServicesAmount,
			Discount:                  order.Discount,
			FinalAmount:               order.FinalAmount,
			SellerIncome:              order.SellerIncome,
			PpnBy:                     order.PpnBy.String,
			PpnTotal:                  order.PpnTotal,
			PpnGoodsTotal:             order.PpnGoodsTotal,
			PpnServicesTotal:          order.PpnServicesTotal,
			PpnShippingTotal:          order.PpnShippingTotal,
			PphTotal:                  order.PphTotal,
			PphGoodsTotal:             order.PphGoodsTotal,
			PphServicesTotal:          order.PphServicesTotal,
			PphShippingTotal:          order.PphShippingTotal,
			RateTotalAmount:           order.RateTotalAmount,
			RateTotalAmountPercentage: order.RateTotalAmountPercentage,
			RateBaseAmount:            order.RateBaseAmount,
			RatePpnAmount:             order.RatePpnAmount,
			RatePphAmount:             order.RatePphAmount,
			PurchaseRequestDate:       order.PurchaseRequestDate,
		})
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
